generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("UALUMNI_DATABASE_URL")
}

model JobOffer {
  id               String                   @id @default(uuid()) @db.Uuid
  description      String
  companyName      String
  companyEmail     String
  companyLogo      String
  department       String
  position         String
  offerLocation    String
  offerTimestamp   DateTime
  isVisible        Boolean                  @default(true)
  visibleSince     DateTime                 @default(now())
  career           Career                   @relation(fields: [careerName], references: [name])
  careerName       String
  applications     JobApplication[]
  contractType     ContractType             @relation(fields: [contractTypeName], references: [name])
  contractTypeName String
  technicalSkills  JobOfferTechnicalSkill[]
}

model JobOfferTechnicalSkill {
  jobOffer                   JobOffer       @relation(fields: [jobOfferId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  jobOfferId                 String         @db.Uuid
  technicalSkill             TechnicalSkill @relation(fields: [technicalSkillName, technicalSkillCategoryName], references: [name, categoryName])
  technicalSkillName         String
  technicalSkillCategoryName String

  @@id([jobOfferId, technicalSkillName, technicalSkillCategoryName])
}

model ContractType {
  name                String     @id
  contractsOfThisType JobOffer[]
}

model Career {
  name            String          @id
  jobOffers       JobOffer[]
  graduations     Graduation[]
  skillCategories SkillCategory[]
}

enum Role {
  ADMIN
  ALUMNI
}

model User {
  id               String  @id @default(uuid()) @db.Uuid
  email            String  @unique
  password         String
  names            String
  surnames         String
  role             Role
  associatedAlumni Alumni?
}

model AlumniToVerify {
  email        String   @id
  password     String
  token        String
  creationDate DateTime @default(now())
}

model Alumni {
  associatedUser  User             @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  id              String           @id @db.Uuid
  address         String?
  birthDate       DateTime         @db.Date
  jobApplications JobApplication[]
  resume          Resume?
  graduations     Graduation[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Graduation {
  career         Career   @relation(fields: [careerName], references: [name])
  careerName     String
  alumni         Alumni   @relation(fields: [alumniId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  alumniId       String   @db.Uuid
  graduationDate DateTime @db.Date

  @@id([careerName, alumniId])
}

model JobApplication {
  jobOffer             JobOffer @relation(fields: [jobOfferId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  jobOfferId           String   @db.Uuid
  alumniWhoApplied     Alumni   @relation(fields: [alumniWhoAppliedId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  alumniWhoAppliedId   String   @db.Uuid
  applicationTimestamp DateTime

  @@id([jobOfferId, alumniWhoAppliedId])
}

model Resume {
  owner                  Alumni                 @relation(fields: [ownerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ownerId                String                 @id @db.Uuid
  numberOfDownloads      Int                    @default(0)
  isVisible              Boolean                @default(false)
  visibleSince           DateTime               @default(now())
  reminderSent           Boolean                @default(false)
  aboutMe                String?
  workExperiences        WorkExperience[]
  knownLanguages         ResumeLanguage[]
  portfolio              PortfolioItem[]
  higherEducationStudies HigherEducationStudy[]
  technicalSkills        ResumeTechnicalSkill[]
  softSkills             ResumeSoftSkill[]
  ciapCourses            ResumeCiapCourse[]
  positionsOfInterest    PositionOfInterest[]
  industriesOfInterest   IndustryOfInterest[]
}

model WorkExperience {
  resume        Resume   @relation(fields: [resumeOwnerId], references: [ownerId], onUpdate: Cascade, onDelete: Cascade)
  resumeOwnerId String   @db.Uuid
  number        Int      @default(autoincrement())
  companyName   String
  position      String
  description   String
  startDate     DateTime @db.Date
  endDate       DateTime @db.Date
  isVisible     Boolean

  @@id([resumeOwnerId, number])
}

model CiapCourse {
  id                 String             @id @default(uuid()) @db.Uuid
  name               String
  date               DateTime           @db.Date
  resumesListingThis ResumeCiapCourse[]

  @@unique([name, date])
}

model ResumeCiapCourse {
  resume        Resume     @relation(fields: [resumeOwnerId], references: [ownerId], onUpdate: Cascade, onDelete: Cascade)
  resumeOwnerId String     @db.Uuid
  course        CiapCourse @relation(fields: [courseId], references: [id])
  courseId      String     @db.Uuid
  isVisible     Boolean

  @@id([resumeOwnerId, courseId])
}

model SoftSkill {
  name               String            @id
  resumesListingThis ResumeSoftSkill[]
}

model ResumeSoftSkill {
  resume        Resume    @relation(fields: [resumeOwnerId], references: [ownerId], onUpdate: Cascade, onDelete: Cascade)
  resumeOwnerId String    @db.Uuid
  skill         SoftSkill @relation(fields: [skillName], references: [name])
  skillName     String
  isVisible     Boolean

  @@id([resumeOwnerId, skillName])
}

model SkillCategory {
  name            String           @id
  technicalSkills TechnicalSkill[]
  relatedCareers  Career[]
}

model TechnicalSkill {
  name                 String
  category             SkillCategory            @relation(fields: [categoryName], references: [name], onUpdate: Cascade, onDelete: Cascade)
  categoryName         String
  resumesListingThis   ResumeTechnicalSkill[]
  jobOffersListingThis JobOfferTechnicalSkill[]

  @@id([name, categoryName])
}

model ResumeTechnicalSkill {
  resume            Resume         @relation(fields: [resumeOwnerId], references: [ownerId], onUpdate: Cascade, onDelete: Cascade)
  resumeOwnerId     String         @db.Uuid
  skill             TechnicalSkill @relation(fields: [skillName, skillCategoryName], references: [name, categoryName])
  skillName         String
  skillCategoryName String
  isVisible         Boolean

  @@id([resumeOwnerId, skillName, skillCategoryName])
}

model Language {
  name    String           @id
  knownBy ResumeLanguage[]
}

model ResumeLanguage {
  resume        Resume   @relation(fields: [resumeOwnerId], references: [ownerId], onUpdate: Cascade, onDelete: Cascade)
  resumeOwnerId String   @db.Uuid
  language      Language @relation(fields: [languageName], references: [name])
  languageName  String
  masteryLevel  Int
  isVisible     Boolean

  @@id([resumeOwnerId, languageName])
}

model PortfolioItem {
  resume        Resume  @relation(fields: [resumeOwnerId], references: [ownerId], onUpdate: Cascade, onDelete: Cascade)
  resumeOwnerId String  @db.Uuid
  title         String
  sourceLink    String
  isVisible     Boolean

  @@id([resumeOwnerId, title])
}

model HigherEducationStudy {
  resume        Resume   @relation(fields: [resumeOwnerId], references: [ownerId], onUpdate: Cascade, onDelete: Cascade)
  resumeOwnerId String   @db.Uuid
  title         String
  institution   String
  endDate       DateTime @db.Date
  isVisible     Boolean

  @@id([resumeOwnerId, title])
}

model PositionOfInterest {
  resume        Resume  @relation(fields: [resumeOwnerId], references: [ownerId], onUpdate: Cascade, onDelete: Cascade)
  resumeOwnerId String  @db.Uuid
  positionName  String
  isVisible     Boolean

  @@id([resumeOwnerId, positionName])
}

model IndustryOfInterest {
  resume        Resume  @relation(fields: [resumeOwnerId], references: [ownerId], onUpdate: Cascade, onDelete: Cascade)
  resumeOwnerId String  @db.Uuid
  industryName  String
  isVisible     Boolean

  @@id([resumeOwnerId, industryName])
}
