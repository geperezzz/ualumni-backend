generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JobOffer {
  id               String           @id @default(uuid()) @db.Uuid
  description      String
  companyName      String
  companyContact   String
  companyLogo      String
  department       String
  position         String
  offerLocation    String
  offerTimestamp   DateTime
  career           Career           @relation(fields: [careerName], references: [name])
  careerName       String
  applications     JobApplication[]
  contractType     ContractType     @relation(fields: [contractTypeName], references: [name])
  contractTypeName String
}

model ContractType {
  name                String     @id
  contractsOfThisType JobOffer[]
}

model Career {
  name            String          @id
  jobOffers       JobOffer[]
  graduations     Graduation[]
  skillCategories SkillCategory[]
}

model Alumni {
  email           String           @id
  password        String
  names           String
  surnames        String
  jobApplications JobApplication[]
  resume          Resume?
  graduations     Graduation[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Graduation {
  career         Career   @relation(fields: [careerName], references: [name])
  careerName     String
  alumni         Alumni   @relation(fields: [alumniEmail], references: [email])
  alumniEmail    String
  graduationDate DateTime @db.Date

  @@id([careerName, alumniEmail])
}

model JobApplication {
  jobOffer              JobOffer @relation(fields: [jobOfferId], references: [id])
  jobOfferId            String   @db.Uuid
  alumniWhoApplied      Alumni   @relation(fields: [alumniWhoAppliedEmail], references: [email])
  alumniWhoAppliedEmail String
  applicationTimestamp  DateTime

  @@id([jobOfferId, alumniWhoAppliedEmail])
}

model Resume {
  owner                  Alumni                 @relation(fields: [ownerEmail], references: [email])
  ownerEmail             String                 @id
  numberOfDownloads      Int                    @default(0)
  isVisible              Boolean                @default(true)
  aboutMe                String?
  knownLanguages         ResumeLanguage[]
  portfolio              PortfolioItem[]
  higherEducationStudies HigherEducationStudy[]
  technicalSkills        ResumeTechnicalSkill[]
  softSkills             ResumeSoftSkill[]
  ciapCourses            ResumeCiapCourse[]
  positionsOfInterest    PositionOfInterest[]
  industriesOfInterest   IndustryOfInterest[]
}

model CiapCourse {
  id                 String             @id @default(uuid()) @db.Uuid
  name               String
  resumesListingThis ResumeCiapCourse[]
}

model ResumeCiapCourse {
  resume           Resume     @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  course           CiapCourse @relation(fields: [courseId], references: [id])
  courseId         String     @db.Uuid
  isVisible        Boolean

  @@id([resumeOwnerEmail, courseId])
}

model SoftSkill {
  name               String            @id
  resumesListingThis ResumeSoftSkill[]
}

model ResumeSoftSkill {
  resume           Resume    @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  skill            SoftSkill @relation(fields: [skillName], references: [name])
  skillName        String
  isVisible        Boolean

  @@id([resumeOwnerEmail, skillName])
}

model SkillCategory {
  name            String           @id
  technicalSkills TechnicalSkill[]
  relatedCareers  Career[]
}

model TechnicalSkill {
  name               String
  category           SkillCategory          @relation(fields: [categoryName], references: [name])
  categoryName       String
  resumesListingThis ResumeTechnicalSkill[]
  resumeOwnerEmail   String

  @@id([name, categoryName])
}

model ResumeTechnicalSkill {
  resume            Resume         @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail  String
  skill             TechnicalSkill @relation(fields: [skillName, skillCategoryName], references: [name, categoryName])
  skillName         String
  skillCategoryName String
  isVisible         Boolean

  @@id([resumeOwnerEmail, skillName, skillCategoryName])
}

model Language {
  name    String           @id
  knownBy ResumeLanguage[]
}

model ResumeLanguage {
  resume           Resume   @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  language         Language @relation(fields: [languageName], references: [name])
  languageName     String
  masteryLevel     Int
  isVisible        Boolean

  @@id([resumeOwnerEmail, languageName])
}

model PortfolioItem {
  resume           Resume  @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  title            String
  description      String
  isVisible        Boolean

  @@id([resumeOwnerEmail, title])
}

model HigherEducationStudy {
  resume           Resume   @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  title            String
  institution      String
  startDate        DateTime @db.Date
  endDate          DateTime @db.Date
  isVisible        Boolean

  @@id([resumeOwnerEmail, title])
}

model PositionOfInterest {
  resume           Resume  @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  positionName     String
  isVisible        Boolean

  @@id([resumeOwnerEmail, positionName])
}

model IndustryOfInterest {
  resume           Resume  @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  industryName     String
  isVisible        Boolean

  @@id([resumeOwnerEmail, industryName])
}
