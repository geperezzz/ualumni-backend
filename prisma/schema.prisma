generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JobOffer {
  id               String           @id @default(uuid()) @db.Uuid
  description      String
  companyName      String
  companyContact   String
  companyLogo      Bytes
  department       String
  position         String
  offerLocation    String
  offerDate        DateTime
  career           Career           @relation(fields: [careerName], references: [name])
  careerName       String
  applications     JobApplication[]
  contractType     ContractType     @relation(fields: [contractTypeName], references: [name])
  contractTypeName String
}

model ContractType {
  name                String     @id
  contractsOfThisType JobOffer[]
}

model Career {
  name        String        @id
  jobOffers   JobOffer[]
  alumni      Graduate[]
  graduatesIn GraduatesIn[]
  category    Category[]
}

model Graduate {
  email           String           @id
  password        String
  names           String
  surnames        String
  telephoneNumber String
  address         String
  jobApplications JobApplication[]
  career          Career[]
  resume          Resume?
  graduatesIn     GraduatesIn[]
}

model GraduatesIn {
  graduate      Graduate @relation(fields: [graduateEmail], references: [email])
  graduateEmail String   @db.Uuid
  career        Career   @relation(fields: [careerName], references: [name])
  careerName    String
  graduateDate  DateTime

  @@id([graduateEmail, careerName])
}

model JobApplication {
  jobOffer                JobOffer @relation(fields: [jobOfferId], references: [id])
  jobOfferId              String   @db.Uuid
  graduateWhoApplied      Graduate @relation(fields: [graduateWhoAppliedEmail], references: [email])
  graduateWhoAppliedEmail String
  applicationDate         DateTime

  @@id([jobOfferId, graduateWhoAppliedEmail])
}

model Resume {
  id                     String                 @default(uuid()) @db.Uuid
  owner                  Graduate               @relation(fields: [ownerEmail], references: [email])
  ownerEmail             String                 @unique
  numberOfDownloads      Int
  isVisible              Boolean
  aboutMe                String
  knownLanguages         ResumeLanguage[]
  portfolio              PortfolioItem[]
  higherEducationStudies HigherEducationStudy[]
  positionsOfInterest    PositionOfInterest[]
  industriesOfInterest   IndustryOfInterest[]
  resumeCiapCourse       ResumeCiapCourse[]
  resumeSoftSkill        ResumeSoftSkill[]
  resumeTechnicalSkill   ResumeTechnicalSkill[]

  @@id([id, ownerEmail])
}

model Category {
  name            String           @id
  technicalSkills TechnicalSkill[]
  career          Career[]
}

model CiapCourse {
  name             String             @id
  ResumeCiapCourse ResumeCiapCourse[]
}

model ResumeCiapCourse {
  resume           Resume     @relation(fields: [resumeId, resumeOwnerEmail], references: [id, ownerEmail])
  resumeId         String     @db.Uuid
  resumeOwnerEmail String
  ciapCourse       CiapCourse @relation(fields: [ciapCourseName], references: [name])
  ciapCourseName   String
  isVisible        Boolean

  @@id([resumeId, resumeOwnerEmail, ciapCourseName])
}

model SoftSkill {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  resumeSoftSkill ResumeSoftSkill[]
}

model ResumeSoftSkill {
  resume           Resume    @relation(fields: [resumeId, resumeOwnerEmail], references: [id, ownerEmail])
  resumeId         String    @db.Uuid
  resumeOwnerEmail String
  softSkill        SoftSkill @relation(fields: [softSkillId], references: [id])
  softSkillId      String    @db.Uuid
  isVisible        Boolean

  @@id([resumeId, resumeOwnerEmail, softSkillId])
}

model TechnicalSkill {
  name                 String
  category             Category               @relation(fields: [categoryName], references: [name])
  categoryName         String
  resumeOwnerEmail     String?
  resumeTechnicalSkill ResumeTechnicalSkill[]

  @@id([categoryName, name])
}

model ResumeTechnicalSkill {
  resume                 Resume         @relation(fields: [resumeId, resumeOwnerEmail], references: [id, ownerEmail])
  resumeId               String         @db.Uuid
  resumeOwnerEmail       String
  technicalSkill         TechnicalSkill @relation(fields: [technicalSkillName, technicalSkillCategory], references: [name, categoryName])
  technicalSkillName     String
  technicalSkillCategory String
  isVisible              Boolean

  @@id([resumeId, technicalSkillName, resumeOwnerEmail, technicalSkillCategory])
}

model Language {
  name    String           @id
  knownBy ResumeLanguage[]
}

model ResumeLanguage {
  resume           Resume   @relation(fields: [resumeId, resumeOwnerEmail], references: [id, ownerEmail])
  resumeId         String   @db.Uuid
  resumeOwnerEmail String
  language         Language @relation(fields: [languageName], references: [name])
  languageName     String
  masteryLevel     Int
  isVisible        Boolean

  @@id([resumeId, languageName, resumeOwnerEmail])
}

model PortfolioItem {
  resume           Resume  @relation(fields: [resumeId, resumeOwnerEmail], references: [id, ownerEmail])
  resumeId         String  @db.Uuid
  resumeOwnerEmail String
  title            String
  description      String
  isVisible        Boolean

  @@id([resumeId, title])
}

model HigherEducationStudy {
  resume           Resume   @relation(fields: [resumeId, resumeOwnerEmail], references: [id, ownerEmail])
  resumeId         String   @db.Uuid
  resumeOwnerEmail String
  title            String
  institution      String
  endDate          DateTime
  isVisible        Boolean

  @@id([resumeId, title, resumeOwnerEmail])
}

model PositionOfInterest {
  resume           Resume @relation(fields: [resumeId, resumeOwnerEmail], references: [id, ownerEmail])
  resumeId         String @db.Uuid
  resumeOwnerEmail String
  positionName     String

  @@id([resumeId, positionName, resumeOwnerEmail])
}

model IndustryOfInterest {
  resume           Resume @relation(fields: [resumeId, resumeOwnerEmail], references: [id, ownerEmail])
  resumeId         String @db.Uuid
  resumeOwnerEmail String
  industryName     String

  @@id([resumeId, industryName, resumeOwnerEmail])
}
