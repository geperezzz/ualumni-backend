generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JobOffer {
  id               String           @id @default(uuid()) @db.Uuid
  description      String
  companyName      String
  companyContact   String
  companyLogo      Bytes
  department       String
  position         String
  offerLocation    String
  offerDate        DateTime
  career           Career           @relation(fields: [careerName], references: [name])
  careerName       String
  applications     JobApplication[]
  contractType     ContractType     @relation(fields: [contractTypeName], references: [name])
  contractTypeName String
}

model ContractType {
  name                String     @id
  contractsOfThisType JobOffer[]
}

model Career {
  name            String            @id
  jobOffers       JobOffer[]
  alumni          Alumni[]
  graduationDates GraduationDates[]
  category        Category[]
}

model Alumni {
  email           String            @id
  password        String
  names           String
  surnames        String
  telephoneNumber String
  address         String
  jobApplications JobApplication[]
  career          Career[]
  resume          Resume?
  graduationDates GraduationDates[]
}

model GraduationDates {
  graduate      Alumni   @relation(fields: [graduateEmail], references: [email])
  graduateEmail String
  career        Career   @relation(fields: [careerName], references: [name])
  careerName    String
  graduateDate  DateTime @db.Date

  @@id([graduateEmail, careerName])
}

model JobApplication {
  jobOffer                JobOffer @relation(fields: [jobOfferId], references: [id])
  jobOfferId              String   @db.Uuid
  graduateWhoApplied      Alumni   @relation(fields: [graduateWhoAppliedEmail], references: [email])
  graduateWhoAppliedEmail String
  applicationDate         DateTime

  @@id([jobOfferId, graduateWhoAppliedEmail])
}

model Resume {
  owner                  Alumni                 @relation(fields: [ownerEmail], references: [email])
  ownerEmail             String                 @id
  numberOfDownloads      Int
  isVisible              Boolean
  aboutMe                String?
  knownLanguages         ResumeLanguage[]
  portfolio              PortfolioItem[]
  higherEducationStudies HigherEducationStudy[]
  positionsOfInterest    PositionOfInterest[]
  industriesOfInterest   IndustryOfInterest[]
  resumeCiapCourse       ResumeCiapCourse[]
  resumeSoftSkill        ResumeSoftSkill[]
  resumeTechnicalSkill   ResumeTechnicalSkill[]
}

model Category {
  name            String           @id
  technicalSkills TechnicalSkill[]
  career          Career[]
}

model CiapCourse {
  name             String             @id
  ResumeCiapCourse ResumeCiapCourse[]
}

model ResumeCiapCourse {
  resume           Resume     @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  ciapCourse       CiapCourse @relation(fields: [ciapCourseName], references: [name])
  ciapCourseName   String
  isVisible        Boolean

  @@id([resumeOwnerEmail, ciapCourseName])
}

model SoftSkill {
  name            String            @id
  resumeSoftSkill ResumeSoftSkill[]
}

model ResumeSoftSkill {
  resume           Resume    @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  softSkill        SoftSkill @relation(fields: [softSkillName], references: [name])
  softSkillName    String
  isVisible        Boolean

  @@id([resumeOwnerEmail, softSkillName])
}

model TechnicalSkill {
  name                 String
  category             Category               @relation(fields: [categoryName], references: [name])
  categoryName         String
  resumeOwnerEmail     String?
  resumeTechnicalSkill ResumeTechnicalSkill[]

  @@id([categoryName, name])
}

model ResumeTechnicalSkill {
  resume                 Resume         @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail       String
  technicalSkill         TechnicalSkill @relation(fields: [technicalSkillName, technicalSkillCategory], references: [name, categoryName])
  technicalSkillName     String
  technicalSkillCategory String
  isVisible              Boolean

  @@id([technicalSkillName, resumeOwnerEmail, technicalSkillCategory])
}

model Language {
  name    String           @id
  knownBy ResumeLanguage[]
}

model ResumeLanguage {
  resume           Resume   @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  language         Language @relation(fields: [languageName], references: [name])
  languageName     String
  masteryLevel     Int
  isVisible        Boolean

  @@id([languageName, resumeOwnerEmail])
}

model PortfolioItem {
  resume           Resume  @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  title            String
  sourceLink       String
  isVisible        Boolean

  @@id([resumeOwnerEmail, title])
}

model HigherEducationStudy {
  resume           Resume   @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  title            String
  institution      String
  endDate          DateTime
  isVisible        Boolean

  @@id([title, resumeOwnerEmail])
}

model PositionOfInterest {
  resume           Resume  @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  positionName     String
  isVisible        Boolean

  @@id([positionName, resumeOwnerEmail])
}

model IndustryOfInterest {
  resume           Resume  @relation(fields: [resumeOwnerEmail], references: [ownerEmail])
  resumeOwnerEmail String
  industryName     String
  isVisible        Boolean

  @@id([industryName, resumeOwnerEmail])
}
